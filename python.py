import streamlit as st
import pandas as pd
import numpy as np
import numpy_financial as npf # <--- ƒê√É S·ª¨A: Import th∆∞ vi·ªán t√†i ch√≠nh

# --- 1. C·∫•u h√¨nh Trang v√† Ti√™u ƒë·ªÅ ---
st.set_page_config(
    page_title="H·ªá th·ªëng Th·∫©m ƒë·ªãnh Ph∆∞∆°ng √°n Vay V·ªën",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("ü•ñ H·ªá th·ªëng Th·∫©m ƒë·ªãnh D·ª± √°n S·∫£n xu·∫•t B√°nh m√¨")
st.subheader("Ph√¢n t√≠ch Hi·ªáu qu·∫£ T√†i ch√≠nh v√† Kh·∫£ nƒÉng Tr·∫£ n·ª£")

# --- 2. H√†m T√≠nh To√°n T√†i ch√≠nh C·ªët l√µi ---

def calculate_financial_metrics(i0, r, c, tax_rate, wacc, n, loan_ratio, loan_interest):
    """T√≠nh to√°n NPV, IRR, DSCR v√† b·∫£ng d√≤ng ti·ªÅn."""
    
    # Gi·∫£ ƒë·ªãnh: Kh·∫•u hao theo ph∆∞∆°ng ph√°p ƒë∆∞·ªùng th·∫≥ng trong 10 nƒÉm
    depreciation = i0 / n
    
    # T√≠nh V·ªën vay v√† V·ªën ch·ªß s·ªü h·ªØu
    loan_amount = i0 * loan_ratio
    equity_amount = i0 * (1 - loan_ratio)
    
    # Gi·∫£ ƒë·ªãnh Tr·∫£ g·ªëc ƒë·ªÅu h√†ng nƒÉm
    # L∆∞u √Ω: Kh√¥ng tr·∫£ g·ªëc nƒÉm 0 (nƒÉm ƒë·∫ßu t∆∞)
    principal_repayment = loan_amount / n
    
    cash_flows = []
    
    # D√≤ng ti·ªÅn nƒÉm 0 (ƒê·∫ßu t∆∞)
    cash_flows.append({
        'NƒÉm': 0,
        'Doanh thu (R)': 0,
        'Chi ph√≠ (C)': 0,
        'EBITDA': 0,
        'Kh·∫•u hao (D)': 0,
        'L√£i vay (I)': 0,
        'EBIT': 0,
        'Thu·∫ø (20%)': 0,
        'L·ª£i nhu·∫≠n r√≤ng': 0,
        'Tr·∫£ g·ªëc': 0,
        'FCF (D√≤ng ti·ªÅn t·ª± do)': -i0,
        'FCF T√≠ch l≈©y': -i0,
        'DSCR': 0
    })

    # D√≤ng ti·ªÅn t·ª´ nƒÉm 1 ƒë·∫øn nƒÉm N
    fcf_values = [-i0]
    cumulative_fcf = -i0

    for year in range(1, n + 1):
        # L√£i vay t√≠nh tr√™n d∆∞ n·ª£ g·ªëc
        outstanding_principal = loan_amount - principal_repayment * (year - 1) if year <= n else 0
        interest_expense = outstanding_principal * loan_interest
        
        # 1. C√°c ch·ªâ s·ªë c∆° b·∫£n
        ebitda = r - c
        ebit = ebitda - depreciation - interest_expense
        
        # 2. Thu·∫ø v√† L·ª£i nhu·∫≠n
        tax = ebit * tax_rate if ebit > 0 else 0
        net_income = ebit - tax
        
        # 3. D√≤ng ti·ªÅn T·ª± do (D√≤ng ti·ªÅn cho Ch·ªß s·ªü h·ªØu: Net Income + Kh·∫•u hao)
        fcf_for_npv_irr = net_income + depreciation 
        
        cumulative_fcf += fcf_for_npv_irr
        fcf_values.append(fcf_for_npv_irr)

        # 4. T√≠nh to√°n DSCR
        # DSCR = EBITDA / (L√£i vay + Tr·∫£ g·ªëc)
        debt_service = interest_expense + principal_repayment
        dscr = ebitda / debt_service if debt_service > 0 else float('inf')
        
        cash_flows.append({
            'NƒÉm': year,
            'Doanh thu (R)': r,
            'Chi ph√≠ (C)': c,
            'EBITDA': ebitda,
            'Kh·∫•u hao (D)': depreciation,
            'L√£i vay (I)': interest_expense,
            'EBIT': ebit,
            'Thu·∫ø (20%)': tax,
            'L·ª£i nhu·∫≠n r√≤ng': net_income,
            'Tr·∫£ g·ªëc': principal_repayment,
            'FCF (D√≤ng ti·ªÅn t·ª± do)': fcf_for_npv_irr,
            'FCF T√≠ch l≈©y': cumulative_fcf,
            'DSCR': dscr
        })
    
    # T√≠nh NPV v√† IRR
    # S·ª¨ D·ª§NG npf.npv v√† npf.irr ƒë·ªÉ kh·∫Øc ph·ª•c l·ªói Attribute Error
    npv = npf.npv(wacc, np.array(fcf_values))
    try:
        irr = npf.irr(np.array(fcf_values))
    except:
        irr = np.nan
    
    # DSCR trung b√¨nh (ch·ªâ t√≠nh t·ª´ nƒÉm 1)
    avg_dscr = pd.DataFrame(cash_flows[1:])['DSCR'].mean()
    
    return pd.DataFrame(cash_flows), npv, irr, avg_dscr


# --- 3. Sidebar: Khu v·ª±c Nh·∫≠p li·ªáu ƒê·∫ßu v√†o ---
with st.sidebar:
    st.header("‚öôÔ∏è Th√¥ng s·ªë D·ª± √°n")

    # Th√¥ng tin c∆° b·∫£n
    I0 = st.number_input("T·ªïng V·ªën ƒê·∫ßu t∆∞ (VNƒê)", min_value=1000000000.0, value=30000000000.0, step=1000000000.0, format="%0.0f")
    N = st.slider("V√≤ng ƒë·ªùi D·ª± √°n (NƒÉm)", 5, 20, 10)
    
    st.markdown("---")
    
    # Th√¥ng s·ªë T√†i ch√≠nh
    R = st.number_input("Doanh thu H√†ng nƒÉm (VNƒê)", min_value=100000000.0, value=3500000000.0, step=100000000.0, format="%0.0f")
    C = st.number_input("Chi ph√≠ Ho·∫°t ƒë·ªông H√†ng nƒÉm (VNƒê)", min_value=100000000.0, value=2000000000.0, step=100000000.0, format="%0.0f")
    Tax_Rate = st.slider("Thu·∫ø su·∫•t TNDN (%)", 0.0, 30.0, 20.0) / 100
    WACC = st.slider("WACC/Chi ph√≠ V·ªën (%)", 5.0, 25.0, 13.0) / 100
    
    st.markdown("---")
    
    # Th√¥ng s·ªë Vay v·ªën
    Loan_Ratio = st.slider("T·ª∑ l·ªá Vay Ng√¢n h√†ng (%)", 0.0, 100.0, 80.0) / 100
    Loan_Interest = st.slider("L√£i su·∫•t Vay Ng√¢n h√†ng (%)", 5.0, 15.0, 10.0) / 100
    
    st.info(f"Kho·∫£n Vay D·ª± ki·∫øn: **{Loan_Ratio * I0:,.0f}** VNƒê")
    st.info(f"T√†i s·∫£n ƒê·∫£m b·∫£o: **70.000.000.000** VNƒê")

# --- 4. T√≠nh to√°n v√† Hi·ªÉn th·ªã K·∫øt qu·∫£ ---

# Th·ª±c hi·ªán t√≠nh to√°n
df_cashflow, npv_result, irr_result, avg_dscr_result = calculate_financial_metrics(
    I0, R, C, Tax_Rate, WACC, N, Loan_Ratio, Loan_Interest
)

# H√†m ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá
def format_currency(value):
    return f"{value:,.0f}"

# --- 4.1. Hi·ªÉn th·ªã Ch·ªâ s·ªë Hi·ªáu qu·∫£ C·ªët l√µi ---
st.header("‚ú® C√°c Ch·ªâ s·ªë Hi·ªáu qu·∫£ T√†i ch√≠nh")
col1, col2, col3 = st.columns(3)

col1.metric(
    label="Hi·ªán gi√° Thu·∫ßn (NPV)",
    value=f"{npv_result:,.0f} VNƒê",
    delta="D·ª± √°n Kh·∫£ thi" if npv_result > 0 else "C·∫ßn xem x√©t"
)

col2.metric(
    label="T·ª∑ su·∫•t Ho√†n v·ªën N·ªôi b·ªô (IRR)",
    value=f"{irr_result * 100:.2f} %",
    delta=f"V∆∞·ª£t WACC: {WACC*100:.2f}%" if irr_result > WACC else "Th·∫•p h∆°n WACC"
)

col3.metric(
    label="Kh·∫£ nƒÉng Tr·∫£ n·ª£ (DSCR TB)",
    value=f"{avg_dscr_result:.2f}",
    delta="An to√†n (>1.25)" if avg_dscr_result >= 1.25 else "R·ªßi ro"
)

st.markdown("---")

# --- 4.2. B·∫£ng D√≤ng ti·ªÅn Chi ti·∫øt ---
st.header("üìä B·∫£ng D√≤ng ti·ªÅn T·ª± do (FCF) Chi ti·∫øt")
st.dataframe(
    df_cashflow.style.format({
        'Doanh thu (R)': format_currency,
        'Chi ph√≠ (C)': format_currency,
        'EBITDA': format_currency,
        'Kh·∫•u hao (D)': format_currency,
        'L√£i vay (I)': format_currency,
        'EBIT': format_currency,
        'Thu·∫ø (20%)': format_currency,
        'L·ª£i nhu·∫≠n r√≤ng': format_currency,
        'Tr·∫£ g·ªëc': format_currency,
        'FCF (D√≤ng ti·ªÅn t·ª± do)': format_currency,
        'FCF T√≠ch l≈©y': format_currency,
        'DSCR': "{:.2f}"
    }),
    use_container_width=True,
    height=450
)

# --- 4.3. Tr·ª±c quan h√≥a D√≤ng ti·ªÅn T√≠ch l≈©y ---
st.header("üìà ƒê·ªì th·ªã D√≤ng ti·ªÅn T√≠ch l≈©y")
st.line_chart(df_cashflow.set_index('NƒÉm')['FCF T√≠ch l≈©y'])

st.markdown("---")

# --- 5. Ph√¢n t√≠ch ƒê·ªô nh·∫°y (Sensitivity Analysis) ---
st.header("üî¨ Ph√¢n t√≠ch ƒê·ªô nh·∫°y (K·ªãch b·∫£n ¬±10%)")
st.caption("Ki·ªÉm tra s·ª± thay ƒë·ªïi c·ªßa NPV khi Doanh thu v√† Chi ph√≠ thay ƒë·ªïi")

# T√≠nh to√°n c√°c k·ªãch b·∫£n
scenarios = {
    'L·∫°c quan (+10% R, -10% C)': (R * 1.1, C * 0.9),
    'C∆° s·ªü (Base Case)': (R, C),
    'Bi quan (-10% R, +10% C)': (R * 0.9, C * 1.1)
}

sensitivity_results = []
for name, (r_scen, c_scen) in scenarios.items():
    _, npv_scen, irr_scen, dscr_scen = calculate_financial_metrics(
        I0, r_scen, c_scen, Tax_Rate, WACC, N, Loan_Ratio, Loan_Interest
    )
    sensitivity_results.append({
        'K·ªãch b·∫£n': name,
        'Doanh thu (R)': r_scen,
        'Chi ph√≠ (C)': c_scen,
        'NPV (VNƒê)': npv_scen,
        'IRR (%)': irr_scen * 100,
        'DSCR TB': dscr_scen
    })

df_sensitivity = pd.DataFrame(sensitivity_results)
df_sensitivity['NPV (VNƒê)'] = df_sensitivity['NPV (VNƒê)'].apply(lambda x: f"{x:,.0f}")
df_sensitivity['IRR (%)'] = df_sensitivity['IRR (%)'].apply(lambda x: f"{x:.2f}")
df_sensitivity['DSCR TB'] = df_sensitivity['DSCR TB'].apply(lambda x: f"{x:.2f}")
df_sensitivity['Doanh thu (R)'] = df_sensitivity['Doanh thu (R)'].apply(lambda x: f"{x:,.0f}")
df_sensitivity['Chi ph√≠ (C)'] = df_sensitivity['Chi ph√≠ (C)'].apply(lambda x: f"{x:,.0f}")

st.table(df_sensitivity)

st.markdown("---")

# --- 6. Khu v·ª±c AI Insight (Placeholder) ---
st.header("üß† Nh·∫≠n ƒë·ªãnh Chuy√™n m√¥n (AI Insight)")
st.info("""
    **[CH·ªñ D√ÄNH CHO T√çCH H·ª¢P AI]**
    ƒê·ªÉ k√≠ch ho·∫°t t√≠nh nƒÉng n√†y, b·∫°n c·∫ßn s·ª≠ d·ª•ng API c·ªßa m√¥ h√¨nh AI (nh∆∞ Google Gemini ho·∫∑c OpenAI) v√† ƒë∆∞a c√°c k·∫øt qu·∫£ t√†i ch√≠nh (NPV, IRR, DSCR) v√†o prompt.
    
    V√≠ d·ª•:
    **Prompt:** "Ph√¢n t√≠ch d·ª± √°n c√≥ NPV {npv_result}, IRR {irr_result} so v·ªõi WACC {WACC}. ƒê√°nh gi√° r·ªßi ro d·ª±a tr√™n k·ªãch b·∫£n bi quan."
""")
